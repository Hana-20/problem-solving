class Solution {
    private boolean isValidRows(char[][]board){
     for(int i=0;i<9;i++){
         Set<Character> s = new HashSet<Character>(); 
         for(int j=0;j<9;j++){
             if(board[i][j]=='.'){
                       
                       continue;
                   }
             if(s.contains(board[i][j])){
                 return false;
             }
             else{
                 s.add(board[i][j]);
             }
         }
     }
     //System.out.println(true);
     return true;
    }
    private boolean isValidColumns(char[][]board){
for(int i=0;i<9;i++){
         Set<Character> s = new HashSet<Character>(); 
         for(int j=0;j<9;j++){
             if(board[j][i]=='.'){
                       continue;
                   }
             if(s.contains(board[j][i])){
                 return false;
             }
             else{
                 s.add(board[j][i]);
             }
         }
     }
      //System.out.println("2");
     return true;
    }
    private boolean isValidSubboxes(char[][]board){
        for(int i=0;i<7;i+=3){
       for(int j=0;j<7;j+=3){
        Set<Character> s = new HashSet<Character>(); 
           for(int k=0;k<3;k++){
               for(int l=0;l<3;l++){
                   if(board[i+k][j+l]=='.'){
                       continue;
                   }
                if(s.contains(board[i+k][j+l])){
                 return false;
             }
             else{
                 s.add(board[i+k][j+l]);
             }
    }
           }}}
           // System.out.println("1");
           return true;
           }
    public boolean isValidSudoku(char[][] board) {
        int flag=1;
            if(isValidRows(board)&&isValidSubboxes(board)&&isValidColumns(board)){
                return true;
            }
            return false;
        
    }
}